(* natural numbers *)

data nat where
| zero: nat
| suc: nat -> nat

def Z : nat = zero
def Z2 : nat = zero
def 1 : nat = suc Z

def hole : nat = ?fill_it

def plus : (x y : nat) -> nat where
| zero m => m
| (suc n) m => plus n (suc m)

def plus' : (x y : nat) -> nat where
| m zero => m
| m (suc n) => plus' (suc m) n

data bool where
| true : bool
| false : bool

def is_double : nat -> bool where
| zero => true
| (suc (suc m)) => is_double m
| (suc zero) => false

data eq (A : set) : A -> A -> set where
| refl: (x : A) -> eq A x x

def test0 : eq nat (suc zero) (plus zero (suc zero)) = refl (suc zero)
def test1 : eq nat (plus' Z 1) (plus Z 1) = refl 1
def test2 : eq nat Z Z2 = refl Z

(* singletons over naturals *)

data singl : nat -> set where
| sZ : singl zero
| sS : (n : nat) -> singl n -> singl (suc n)

(*) This needs to become a negative test case
(*) def singl_plus : (m : nat) -> (n : nat) -> singl m -> singl n -> singl m where
(*) | zero n fZ singl_n => singl_n 	(*) singl_n is of the wrong type!!!

def singl_plus : (m n : nat) -> singl m -> singl n -> singl m where
| zero n sZ singl_n => sZ

(* finite numbers *)

data fin : nat -> set where
| fZ : (n : nat) -> fin (suc n)
| fS : (n : nat) -> fin n -> fin (suc n)

(* lists *)

data list : set -> set where (*) no parameters here
| nil: (A : set) -> list A
| cons: (A : set) -> A -> list A -> list A

def empty_nat_list : list nat = nil nat
def unary_nat_list : list nat = cons nat 1 (nil nat)

(* biiig numbers *)

data big_nat : set_1 where
| big_zero : big_nat
| big_suc : big_nat -> big_nat

def big_1 : big_nat = big_suc big_zero

(*) data big_list (A : set) : set where (*) we use parameters here
(*) | big_nil: big_list A
(*) | big_cons: A -> big_list A -> big_list A

(*) def big_empty_nat_list : big_list big_nat = big_nil
(*) def big_unary_nat_list : big_list big_nat = big_cons big_1 big_nil
