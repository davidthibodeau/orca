data nat where
| zero : nat
| suc : nat -> nat

def plus : nat -> nat -> nat where
| zero m => m
| (suc n) m => suc (plus n m)

data vect (A : set) : nat -> set where
| nil : vect A zero
| cons : (n : nat) (x : A) -> vect A n -> vect A (suc n)

(*) define eq type
(*) test by using this equality


def head : (n : nat) (A : set) -> vect A (suc n) -> A where
| ._ A (cons n x xs) => x

def tail : (n : nat) (A : set) -> vect A (suc n) -> vect A n where
| n A (cons .n x xs) => xs

def append : (n m : nat) (A : set) -> vect A n -> vect A m -> vect A (plus n m) where
| ._ m A nil ys => ys
| ._ m A (cons n x xs) ys => cons (plus n m) x (append n m A xs ys)

def zip : (n : nat) -> (D : set) -> (B : set) -> (C : set) -> (f : D -> B -> C) -> vect D n -> vect B n -> vect C n where
| zero A B C f nil nil => nil
| ._ D B C f (cons n x xs) (cons ._ y ys) => cons n (f x y) (zip n D B C f xs ys)

data eq (A : set) (x : A) : A -> set where
| refl : eq A x x

def eq_app_nil : (A : set) -> (n : nat) -> (x : vect A n) -> eq (vect A n) x (append zero n A nil x) = fn A n x => refl

def l1 : vect nat (suc (suc zero)) = cons (suc zero) zero (cons zero (suc zero) nil)
def l2 : vect nat (suc (suc zero)) = cons (suc zero) (suc (suc zero)) (cons zero (suc (suc (suc zero))) nil)
def l3 : vect nat (suc (suc (suc (suc zero)))) =
   cons (suc (suc (suc zero))) zero (cons (suc (suc zero)) (suc zero) (cons (suc zero) (suc (suc zero)) (cons zero (suc (suc (suc zero))) nil)))

def eq_app : eq (vect nat (suc (suc (suc (suc zero))))) (append (suc (suc zero)) (suc (suc zero)) nat l1 l2) l3 = refl
