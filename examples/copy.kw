syn tm where
| app: tm -> tm -> tm
| lam: (tm -> tm) -> tm

syn ctx where

def copy : (g : ctx) -> (g |- tm) -> (g |- tm) where
| g (app M N) => app (copy g M) (copy g N)
| g (lam (\x. M)) => lam (\x. copy (g, x) M)
| g x => x