syn tm where
| app: tm -> tm -> tm
| lam: (tm -> tm) -> tm
| one : tm

lf tp where
| unit : tp
| arr : tp -> tp -> tp

syn oft : tm -> tp -> * where
| t-unit: oft one unit
| t-app: (f: tm) -> (e : tm) -> (s: tp) -> (t: tp)
         -> oft f (arr s t) -> oft e s -> oft (app f e) t
| t-lam: (s:tp) -> (t:tp) -> (e:tm -> tm)
         -> ((x:tm) -> oft x s -> oft (e x) t) -> oft (lam (\x.e x)) (arr s t)

(*) def copy : (g : ctx) -> (g |- tm) -> (g |- tm) where
(*) | g (app M N) => app (copy g M) (copy g N)
(*) | g (lam (\x. M)) => lam (\x. copy (g, x) M)
(*) | g x => x

data isctx : (g:ctx) -> set where
| Empty : isctx 0
| Cons : (g:ctx) -> isctx g -> (t:tp) -> isctx (g, tp)

data oft' (g:ctx) : isctx g -> (g |- tm) -> (|- tp) -> set where
| t-unit' : (G : isctx g) -> oft' g G one unit
| t-app' : (G : isctx g) -> (f : (g |- tm)) -> (e : (g |- tm)) -> (s : |- tp) -> (t: |- tp)
         -> oft' g G f (arr s t) -> oft' g G e s -> oft' g G (app f e) t