syn tm where
| app: tm -> tm -> tm
| lam: (tm -> tm) -> tm
| one : tm

lf tp where
| unit : tp
| arr : tp -> tp -> tp

syn oft : tm -> tp -> * where
| t-unit: oft one unit
| t-app: (f: tm) -> (e : tm) -> (s: tp) -> (t: tp) ->
  oft f (arr s t) -> oft e s -> oft (app f e) t
(*) | t-lam:

def copy : (g : ctx) -> (g |- tm) -> (g |- tm) where
| g (app M N) => app (copy g M) (copy g N)
| g (lam (\x. M)) => lam (\x. copy (g, x) M)
| g x => x